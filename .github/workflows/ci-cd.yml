name: "ci-cd-pipeline"

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  issues: write
  actions: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12]

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Lint with flake8
        run: |
          flake8 src tests agents --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src tests agents --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type check with mypy
        run: |
          mypy src agents --ignore-missing-imports

      - name: Security check with bandit
        run: |
          bandit -r src agents -f json -o bandit-report.json || true

      - name: Test with pytest
        run: |
          pytest tests/ --cov=src --cov=agents --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Prepare triage on failure
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          sudo apt-get update -y && sudo apt-get install -y unzip
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          mkdir -p logs
          gh api \
            -H "Accept: application/vnd.github+json" \
            repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/logs > logs.zip || true
          unzip -o logs.zip -d logs || true
          python scripts/triage_failure.py \
            --workflow-name "${{ github.workflow }}" \
            --run-url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            --git-ref "${{ github.ref }}" \
            --commit-sha "${{ github.sha }}" \
            --logs-root logs \
            --tail-lines 200

  build-and-test-docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image
        run: |
          docker build -t ai-seed-app:latest .
          
      - name: Test Docker container
        run: |
          docker run --rm -d --name test-container -p 8000:8000 ai-seed-app:latest
          sleep 10
          curl -f http://localhost:8000/health || exit 1
          docker stop test-container

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build-and-test-docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying to production..."
          # Add your deployment logic here
          # Could be Docker registry push, Kubernetes deploy, cloud provider deployment, etc.
